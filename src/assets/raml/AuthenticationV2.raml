#%RAML 0.8
title: Authentication API
baseUri: http://api.covisintlabs.com/authn/v2
protocols: [HTTPS]

# ************************* The content of resource.raml starts here *****************************
schemas:
     
  - securityQuestions: |
      {
        "id" : "http://api.covisint.com/schema/securityQuestions/v1",
        "$schema" : "http://json-schema.org/draft-04/schema",
        "type" : "array",
        "description": "Collection of security questions.",
        "items": {
          "description": "The security questions.",
          "$ref": "http://api.covisint.com/schema/securityQuestion/v1",
          "required": true
        }
      }

  - securityQuestion: |
      {
        "id" : "http://api.covisint.com/schema/securityQuestion/v1",
        "$schema" : "http://json-schema.org/draft-04/schema",
        "type" : "object",
        "description" : "A representation of a security question.",
        "extends" : {
          "$ref" : "http://api.covisint.com/idm/schema/realmScopedResource#"
        },
        "properties" : {
          "version": {
            "description" : "The current version for this resource.  Exists once the resource has been saved. This is mandatory for PUT requests, but should not be supplied for POST requests. User supplied value will be ignored and will be set to the creation value."
          },
          "owner": {
            "description": "The owner of this security question. Required only when creating or updating the person scoped question.",
            "$ref": "http://api.covisint.com/schema/resourceReference#",
            "required": false
          },
          "question" : {
            "type" : "array",
            "description": "Internationalized security question text.",
            "required": true,
            "minItems": 0,
            "items": {
              "type": "object",
              "properties": {
                "lang": { "type": "string", "required": true, "maxLength": 10 },
                "text": { "type": "string", "required": true, "maxLength": 2000 }
              }
            }
          }
        }
      }
            
  - securityQuestionAccount: |
      {
        "id" : "http://api.covisint.com/schema/securityQuestionAccount/v1",
        "$schema" : "http://json-schema.org/draft-04/schema",
        "type" : "object",
        "description" : "A representation of a security question account.",
        "extends" : {
          "$ref" : "http://api.covisint.com/schema/realmScopedResource#"
        },
        "properties" : {
          "version": {
            "description" : "The current version for this resource.  Exists once the resource has been saved. This is mandatory for PUT requests, but should not be supplied for POST requests. User supplied value will be ignored and will be set to the creation value."
          },
          "questions": {
            "type" : "array",
            "description": "The security questions chosen for this particular account.",
            "required": true,
            "minItems": 0,
            "items": {
              "type": "object",
              "properties": {
                "question": {
                  "description": "The selected question.",
                  "$ref": "http://api.covisint.com/schema/resourceReference#",
                  "required": true
                },
                "answer" : {
                  "type" : "string",
                  "maxLength" : 255,
                  "description" : "The actual answer text, in the supplier's preferred locale.  Required only when creating or updating the security question account.",
                  "required": false
                },
                "index" : {
                  "type" : "number",
                  "description" : "The logical order in which this question is to be viewed with respect to other questions used by this account. If provided, should be for all questions in a sequence starting with 1.",
                  "minValue" : 1,
                  "required": false
                }
              }
            }
          }
        }
      }   

  - authenticationRequest: |
       {
        "id" : "http://api.covisint.com/schema/authenticationRequest",
        "$schema" : "http://json-schema.org/draft-04/schema",
        "type" : "object",
        "description" : "Schema representing a authentication request resource.",
        "properties" : {
          "instant" : { 
            "type" : "number", 
            "description" : "The time, in milliseconds since the epoch, when the authentication request is being made."
          },
          "subject": {
            "type": "string",
            "description": "The subject for which this request is being made. It is the unique identifier for the person.",
            "required": true
          },
          "password": {
            "type": "string",
            "description": "The password for the subject to validate.",
            "required": true
          },
          "service": {
            "type": "string",
            "description": "The caller service description for the request."
          },
          "subjectInet": {
            "type": "string",
            "description": "The IP address of the caller service.",
            "required": true
         }
        }
       }
             
  - authenticationResponse: |
        {
          "id" : "http://api.covisint.com/schema/authenticationResponse",
          "$schema" : "http://json-schema.org/draft-04/schema",
          "type" : "object",
          "description" : "Schema representing a authentication response resource.",
          "properties" : {
            "instant" : { 
              "type" : "number", 
              "description" : "The time, in milliseconds since the epoch, when the authentication request is being made."
            },
            "result" : { 
              "type" : "string",
              "enum" : [ "SUCCESS", "UNKNOWN_SUBJECT", "BAD_PASSWORD","LOCKED","EXPIRED","ERROR" ],
              "description" : "The status of the authentication request."
            },
            "request": {
              "type" : "object",
              "description": "The authentication request reference.",
              "$ref": "http://api.covisint.com/idm/schema/authenticationRequest#"
            }
          }
        }
  - authenticationRule : |
        {
          "id" : "http://api.covisint.com/idm/schema/authenticationRule",
          "$schema" : "http://json-schema.org/draft-04/schema",
          "type" : "object",
            "description" : "A container for authentication rule",
            "properties" : {
              "type" : { "enum" : [ "PasswordLockout"], "description" : "The authentication rule type." }
            },
            "required" : [ "type" ]
        } 
  - passwordLockoutRule : |
        {
          "id" : "http://api.covisint.com/idm/schema/passwordLockoutRule",
          "$schema" : "http://json-schema.org/draft-04/schema",
          "type" : "object",
            "description" : "History rule for password policy",
            "extends" : {"$ref" : "http://api.covisint.com/schema/authenticationRule#"
              },
            "properties" : {
              "failures" : {"type" : "number","description" : "The number of failures that can occur, with the failure lockout period, before a password credential is locked.", "required": false, "default":3
              },
              "failureWindow" : {"type" : "number","description" : "The amount of time, in minutes, within which a set number of failures must occur for a password credential to be locked", "required": false, "default":5
              },
              "lockoutWindow" : {"type" : "number","description" : "The amount of time, in minutes, before a password that was locked due to too many failed authentication attempts is automatically unlocked.", "required": false, "default":15
              }
            }
        }       
  - authenticationPolicy: |
        {
          "id" : "http://api.covisint.com/schema/authenticationPolicy",
          "$schema" : "http://json-schema.org/draft-04/schema",
          "type" : "object",
          "description" : "Schema representing an authentication policy resource.",
          "extends" : {
                "$ref" : "http://api.covisint.com/schema/realmScopedResource#"
          },
          "properties" : {
            "status" : { 
              "type" : "string",
              "enum" : [ "active", "inactive", "deleted" ],
              "description" : "The status of the authentication policy.",
              "required": true
            },
            "name" : {
              "type" : "string",
              "description": "The name of authentication Policy.",
              "required": true
            },
            "desc": {
              "type" : "string",
              "description": "The description for authentication Policy."
            },                                  
             "rules" : {
               "type" : "array",
               "description" : "Authentication Policy Rules",
               "minItems" : 1,
               "items" : { "$ref" : "http://api.covisint.com/idm/schema/authenticationRule#" },
               "required": true
            }
          }
        }
  - passwordRule : |
        {
          "id" : "http://api.covisint.com/idm/schema/passwordRule",
          "$schema" : "http://json-schema.org/draft-04/schema",
          "type" : "object",
            "description" : "A container for password rule",
            "properties" : {
              "type" : { "enum" : [ "history", "lifetime", "character_class", "disallowed_words", "disallowed_characters", "length"], "description" : "The password rule type." }
            },
            "required" : [ "type" ]
        } 
  - historyRule : |
        {
          "id" : "http://api.covisint.com/idm/schema/historyRule",
          "$schema" : "http://json-schema.org/draft-04/schema",
          "type" : "object",
            "description" : "History rule for password policy",
            "extends" : {"$ref" : "http://api.covisint.com/schema/passwordRule#"
              },
            "properties" : {
              "numberOfPasswords" : {"type" : "number","description" : "History for passwords to maintain", "required": true
              }
            }
        }
  - lifetimeRule : |
        {
          "id" : "http://api.covisint.com/idm/schema/lifetimeRule",
          "$schema" : "http://json-schema.org/draft-04/schema",
          "type" : "object",
            "description" : "Lifetime rule for password policy",
            "extends" : {"$ref" : "http://api.covisint.com/schema/passwordRule#"
              },
            "properties" : {
              "minPasswordLifetime" : {"type" : "number","description" : "The minimum amount of time, in days, that must pass between password changes.", "required": true
              },
              "maxPasswordLifetime" : {"type" : "number","description" : "The maximum time, in days, that a password can exist before it is changed", "required": true
              }
            }
        } 
  - characterClassRule : |
        {
          "id" : "http://api.covisint.com/idm/schema/characterClassRule",
          "$schema" : "http://json-schema.org/draft-04/schema",
          "type" : "object",
            "description" : "Character class rule for password policy",
            "extends" : {"$ref" : "http://api.covisint.com/schema/passwordRule#"
              },
            "properties" : {
              "allowUpperChars" : {"type" : "boolean","description" : "If password policy allows uppercase chars.", "required": true
              },
              "allowLowerChars" : {"type" : "boolean","description" : "If password policy allows lowercase chars.", "required": true
              },
              "allowNumChars" : {"type" : "boolean","description" : "If password policy allows numbers.", "required": true
              },
              "allowSpecialChars" : {"type" : "boolean","description" : "If password policy allows special chars.", "required": true
              },
              "requiredNumberOfCharClasses" : {"type" : "boolean","description" : "If password policy requires numbers.", "required": true
              }
            }
        }
  - disallowedWordsRule : |
        {
          "id" : "http://api.covisint.com/idm/schema/disallowedWordsRule",
          "$schema" : "http://json-schema.org/draft-04/schema",
          "extends" : {"$ref" : "http://api.covisint.com/schema/passwordRule#"
              },
          "type" : "object",
            "description" : "Disallowed words rule for password policy",
            "properties" : {
              "wordListId" : {"type" : "number","description" : "Unique identifier of the disallowed word list", "required": true
              }
            }
        }
  - disallowedCharsRule : |
        {
          "id" : "http://api.covisint.com/idm/schema/disallowedCharsRule",
          "$schema" : "http://json-schema.org/draft-04/schema",
          "extends" : {"$ref" : "http://api.covisint.com/schema/passwordRule#"
              },
          "type" : "object",
            "description" : "Disallowed chars rule for password policy",
            "properties" : {
              "disallowedChars" : {"type" : "string","description" : "Disallowed characters in the password", "required": true
              }
            }
        }
  - lengthRule : |
        {
          "id" : "http://api.covisint.com/idm/schema/lengthRule",
          "$schema" : "http://json-schema.org/draft-04/schema",
          "extends" : {"$ref" : "http://api.covisint.com/schema/passwordRule#"
              },
          "type" : "object",
            "description" : "Length rule for password policy",
            "properties" : {
              "min" : {"type" : "number","description" : "Minimum length of the password alowed.", "required": true
              },
              "max" : {"type" : "number","description" : "Maximum length of the password alowed.", "required": true
              }
            }
        }
  - passwordPolicy: |
        {
          "id" : "http://api.covisint.com/schema/passwordPolicy",
          "$schema" : "http://json-schema.org/draft-04/schema",
          "type" : "object",
          "description" : "Schema representing an password policy resource.",
          "extends" : {
            "$ref" : "http://api.covisint.com/schema/realmScopedResource#"
          },
          "properties" : {
            "status" : { 
              "type" : "string",
              "enum" : [ "active", "inactive", "deleted" ],
              "description" : "The status of the password policy.",
              "required": true
            },
            "name" : {
              "type" : "string",
              "description": "The name of password Policy.",
              "required": true
            },
            "desc": {
              "type" : "string",
              "description": "The description for password Policy."
            },                                  
            "rules" : {
               "type" : "array",
               "description" : "Password Policy Rules",
               "minItems" : 0,
               "items" : { "$ref" : "http://api.covisint.com/idm/schema/passwordRule#" },
               "required": false
            }
          }
        }
   
  - password: |
        {
          "id" : "http://api.covisint.com/schema/password",
          "$schema" : "http://json-schema.org/draft-04/schema",
          "type" : "object",
          "description" : "Schema representing an password resource.",
          "extends" : {
            "$ref" : "http://api.covisint.com/idm/schema/realmScopedResource#"
          },
          "properties" : {
            "subject": { 
              "description": "The subject for which this password resource belongs to.",
              "$ref": "http://api.covisint.com/schema/resourceReference#",
              "required": true
            },
            "password": {
              "type" : "string",
              "description": "The password string for the subject.",
              "required": true
            },
            "passwordPolicyId" : { 
              "type" : "string", 
              "description" : "The unique identifier for the password policy governing the password.",
              "required": true
            },
            "authenticationPolicyId" : { 
              "type" : "string", 
              "description" : "The unique identifier for the authentication policy governing the password.",
              "required": true
            },
            "expiration" : { 
              "type" : "number", 
              "description" : "The time, in milliseconds since the epoch, when the password expires."
            },
            "locked" : {
              "type" : "boolean",
              "description" : "Whether or not the password is locked."
            },
            "unlockInstant" : { 
              "type" : "number", 
              "description" : "The time, in milliseconds since the epoch, when the password will be unlocked."
            }
          }
        }
  - passwordValidation: |
        {
          "id" : "http://api.covisint.com/schema/passwordValidation",
          "$schema" : "http://json-schema.org/draft-04/schema",
          "type" : "object",
          "description" : "Schema representing an password validation.",
          "properties" : {
            "name" : {
              "type" : "array",
              "description": "Represents password validation response.",
              "required": true,
              "minItems": 1,
              "items": {
                "type": "object",
                "properties": {
                  "type": { "type": "string" },
                  "description": { "type": "string", "maxLength": 2000 },
                  "passed": { "type": "boolean", "required": true }
                }
              }
            }
          }
        }
        
  - pin: |
        {
          "id" : "http://api.covisint.com/schema/pin",
          "$schema" : "http://json-schema.org/draft-04/schema",
          "type" : "object",
          "description" : "Schema representing an pin resource.",
          "extends" : {
            "$ref" : "http://api.covisint.com/idm/schema/realmScopedResource#"
          },
          "properties" : {
            "pin": { 
              "type" : "string",
              "description": "The pin string for pin resource.",
              "required": true
            }
          }
        }
            
traits:
  - secured:
      usage: Apply this to any method that needs to be secured
      description: Requests requires authentication
      headers:
        Authorization:
          description: Access token that is obtained from the api authentication service
          pattern: ^Bearer .*$
          required: true
      responses:
        401:
          description: Unauthorized request
  - getResponse:
        responses:
          404: 
            description: The URI requested is invalid or the resource requested does not exist.
            # substatus codes and error messages are mentioned below:
              # (If a resource id is a URI parameter) framework:resource:missing - A resource with the following ID was not found: {resourceId}
              # No message for an invalid URI
            body: 
              application/vnd.com.covisint.error.v1+json:
                schema: errorResponseSchema
                        
          406: 
            description: Unable to produce content of specified 'Accept' media type
            # substatus codes and error messages are mentioned below:
              # framework:request:unsupported:mediatype - The server is unable to produce content of type {acceptMediaType}
            body: 
              application/vnd.com.covisint.error.v1+json:
                schema: errorResponseSchema
          
          500: 
            description: An unknown server error occurred
            # substatus codes and error messages are mentioned below:
              # framework:unknown
            body:      
              application/vnd.com.covisint.error.v1+json:
                schema: errorResponseSchema
  -  postResponse:
        responses:
          406: 
            description: Unable to consume content of specified 'Content-Type' media type
            # substatus codes and error messages are mentioned below:
              # framework:request:unsupported:mediatype - The server is unable to consume content of type {contentMediaType}
            body:      
              application/vnd.com.covisint.error.v1+json:
                schema: errorResponseSchema   
                   
          500:  
            description: server error when trying to process the request
            body:      
              application/vnd.com.covisint.error.v1+json:
                schema: errorResponseSchema                          
  -  putResponse:
        responses:
          406: 
            description: Unable to consume content of specified 'Content-Type' media type
            # substatus codes and error messages are mentioned below:
              # framework:request:unsupported:mediatype - The server is unable to consume content of type {contentMediaType}
            body:      
              application/vnd.com.covisint.error.v1+json:
                schema: errorResponseSchema   
          409:
            description: There was a problem with the client's request
            # substatus codes and error messages are mentioned below:
            # framework:resource:conflict
            # framework:resource:conflict:id - The ID of the resource in the request, {requestedId}, does not match the ID of the given resource, {resourceId}
            # framework:resource:conflict:version - The version of the provided resource, {requestVersion}, does not match the current version of the resource, {latestVersion}
            body:
              application/vnd.com.covisint.error.v1+json:
                schema: errorResponseSchema
          415: 
            description: Unable to consume content of specified 'Content-Type' media type
            # substatus codes and error messages are mentioned below:
              # framework:request:unsupported:mediatype - The server is unable to consume content of type {contentMediaType}
            body:      
              application/vnd.com.covisint.error.v1+json:
                schema: errorResponseSchema
          500:
            description: server error when trying to process the request
            body:      
              application/vnd.com.covisint.error.v1+json:
                schema: errorResponseSchema                          
                 
resourceTypes:
  - baseMethod:
      get:
        responses:
          404:
            description: The specified resource does not exist.
          400:
            description: There was a problem with the client's request
            body:
              application/vnd.com.covisint.error.v1+json:
                schema: errorResponseSchema
          500:
            description: server error when trying to process the request
            body:      
              application/vnd.com.covisint.error.v1+json:
                schema: errorResponseSchema                          
                       
/persons/{personId}/accounts:
  is: [secured]
  uriParameters:
    personId: 
      description: The unique id of the person.
      type: string
      required: true

  /securityQuestion:
    type: baseMethod
    get:
      description: Returns the person's chosen security questions
      is: [secured]
      headers:
        Accept:
          description: Media type for a person security question account.
          type: string
          required: true
      responses:
        200:
            description: The person's chosen security questions were successfully retrieved.
            body:
               application/vnd.com.covisint.platform.person.account.securityQuestion.v1+json:
                schema: securityQuestionAccount
        400:
            description: There was a problem with the client's request
             # substatus codes and error messages are mentioned below:
             # framework:request
             # framework:request:io
             # framework:request:io:read - 
             # framework:request:io:read:parsing
             # framework:request:io:write
             # framework:request:header:missing - Missing request header: {headerName}
             # framework:request:data:missing - The following information was missing from the resource: {resourceFieldName(s)}
             # framework:resource:missing  - A resource with the following ID was not found: {resourceId}
             # framework:request:invalid:header:value - Invalid x-requestor header value. Valid values are [person, application]
            body:
              application/vnd.com.covisint.error.v1+json:
                schema: errorResponseSchema
              
    put:
      description: Updates a person's security questions account (creates one if it doesn't exist).
      headers:
          Content-type:
            description: Media type for a person security question account.
            type: string
            required: true
          Accept:
            description: Media type for a person security question account.
            type: string
            required: true
      body:
        application/vnd.com.covisint.platform.person.account.securityQuestion.v1+json:
          schema: securityQuestionAccount
      responses:
        200:
          description: The person's security question account was updated successfully (or created if it didn't already exist).
          body:
            application/vnd.com.covisint.platform.person.account.securityQuestion.v1+json:
              schema: securityQuestionAccount
        400:
            description: There was a problem with the client's request
             # substatus codes and error messages are mentioned below:
             # framework:request
             # framework:request:io
             # framework:request:io:read - 
             # framework:request:io:read:parsing
             # framework:request:io:write
             # framework:request:header:missing - Missing request header: {headerName}
             # framework:resource:data:missing - The following information was missing from the resource: {resourceFieldName(s)}
             # framework:resource:data:illegal - The following information was illegal from the resource:  {fieldSpecificError(s)}
             # security.question.account.invalid.fixed.questions - Only {count} unique fixed questions are allowed
             # security.question.account.invalid.fixed.question.index - Set unique index for all fixed questions in a sequence starting with '1' OR do not set index for any question
             # security.question.account.invalid.challenge.question- Only {count} challenge question(s) are allowed
             # security.question.account.invalid.fixed.question.id.format - Invalid fixed question id format. Valid format is 'realmId:questionId', where questionId is a number
             # framework:request:invalid:header:value - Invalid x-requestor header value. Valid values are [person, application]             
            body:
              application/vnd.com.covisint.error.v1+json:
                schema: errorResponseSchema
  
/securityQuestions:
  type: baseMethod
  get:
    description: Search for security questions.
    headers:
      Accept:
        description: Media type for a security question resource.
        example: application/vnd.com.covisint.platform.securityquestion.v1+json.
        type: string
        required: true
    queryParameters:
      owner.id:
        description: Filter on the id of the resource owning the question. For example, the person id or organization id.  This query parameter is only required if ownerType is specified.
        type: string
        required: false
      owner.type:
        description: Filter on the type of the resource owning the question.  For example, person or organization.  This query paramer is only required if ownerId is specified.
        type: string
        required: false
    responses:
      200:
          description: All matching security questions were successfully retrieved.
          body:
             application/vnd.com.covisint.platform.securityquestion.v1+json:
              schema: securityQuestions
      400:
          description: There was a problem with the client's request
             # substatus codes and error messages are mentioned below:
             # framework:request
             # framework:request:io
             # framework:request:io:read - 
             # framework:request:io:read:parsing
             # framework:request:io:write
             # framework:request:header:missing - Missing request header: {headerName}
             # framework:request:param:missing - Missing request parameter: {queryParameterName}
             # framework:request:data:missing - The following information was missing from the resource: {resourceFieldName(s)}
             # securityquestions.multiple.owner.id.invalid - Muliple owner ids {ownerId(s)} are not allowed
             # securityquestions.multiple.owner.type.invalid - Muliple owner types {ownerId(s)} are not allowed
             # securityquestions.owner.id.invalid - Owner id {ownerId} invalid if owner type is not mentioned
             # securityquestions.owner.type.invalid - Owner type {ownerType} invalid if owner id is not mentioned
             # framework:request:invalid:header:value - Invalid x-requestor header value. Valid values are [person, application]
          body:
            application/vnd.com.covisint.error.v1+json:
              schema: errorResponseSchema
  
  /{id}:
    put:
        description: Updates person scoped question, creating it when it doesn't exist. Also clears the person scoped question if empty question array is supplied. In all the scenarios, the person scoped answer gets erased.
        headers:
            Content-type:
              description: Media type for a person security question account.
              example: application/vnd.com.covisint.platform.securityquestion.v1+json.
              type: string
              required: true
            Accept:
              description: Media type for a person security question account.
              example: application/vnd.com.covisint.platform.securityquestion.v1+json.
              type: string
              required: true
        body:
          application/vnd.com.covisint.platform.securityquestion.v1+json:
            schema: securityQuestion
        responses:
          200:
            description: The person scoped question was updated successfully (or created if it didn't already exist).
            body:
              application/vnd.com.covisint.platform.securityquestion.v1+json:
                schema: securityQuestion
          400:
            description: There was a problem with the client's request
               # substatus codes and error messages are mentioned below:
               # framework:request
               # framework:request:io
               # framework:request:io:read - 
               # framework:request:io:read:parsing
               # framework:request:io:write
               # framework:request:header:missing - Missing request header: {headerName}
               # framework:resource:data:missing - The following information was missing from the resource: {resourceFieldName(s)}
               # framework:resource:data:illegal - The following information was illegal from the resource:  {fieldSpecificError(s)}
               # security.question.invalid.owner.type - Invalid owner type for challenge question. Valid value is: person
               # security.question.one.question.text.allowed - Only 1 question text is allowed
               # security.question.challenge.question.not.allowed - Challenge question is not allowed
               # framework:request:invalid:header:value - Invalid x-requestor header value. Valid values are [person, application]
            body:
              application/vnd.com.covisint.error.v1+json:
                schema: errorResponseSchema
              
/policies:
   is: [secured]
   description: collection endpoint for authentication policy resources
   get:
     description: Performs a search for authentication policy resources.
     headers:
       Accept:
         description: Media type.
         type: string
         required: true
      
     queryParameters:
      id: 
        description: Retrieve only authentication policies with the specified ids.  The search is case-insensitve.  Multiple parameters are supported and the search results will be a union.
        type: string
        maxLength: 36
        required: false
      sortBy:
        description: Sort the search results.
        type: string
        required: false
        enum: [ "creation" ]
     responses:
      200:
        description: All authentication policies that satisfy the query parameters were successfully retrieved (response collection may be empty).
        body:
          application/vnd.com.covisint.platform.authn.policy.v1+json:
            schema: authenticationPolicy
      400:
        description: There was a problem with the client's request
        # substatus codes are mentioned below:
        # framework:request:invalid:header:value - Invalid x-requestor header value. Valid values are [person, application]     

   post:
      description: Creates an authentication policy.
      headers:
        Accept:
          description: Media type.
          example: application/vnd.com.covisint.platform.authn.policy.v1+json.
          type: string
          required: true
        Content-type:
          description: Media type.
          example: application/vnd.com.covisint.platform.authn.policy.v1+json.
          type: string
          required: true
      body:
        application/vnd.com.covisint.platform.authn.policy.v1+json:
          schema: authenticationPolicy
      responses:
        200:
          description: The authentication policy was successfully created
          body:
            application/vnd.com.covisint.platform.authn.policy.v1+json:
              schema: authenticationPolicy
              
        400:
          description: There was a problem with the client's request
          # substatus codes are mentioned below:
          # framework:request
          # framework:request:io
          # framework:request:io:read - 
          # framework:request:io:read:parsing
          # framework:request:io:write
          # framework:request:header:missing - Missing request header: {headerName}
          # framework:request:param:missing - Missing request parameter: {queryParameterName}
          # framework:request:data:missing - The following information was missing from the resource: {resourceFieldName(s)}
          # framework:request:data:invalid - The following information should not be part of the resource: {resourceFieldName}    
          # framework:request:invalid:header:value - Invalid x-requestor header value. Valid values are [person, application]        
          body:
            application/vnd.com.covisint.error.v1+json:
              schema: errorResponseSchema
                          
   /{id}:
    description: individual resource endpoint for authentication policy. 
    uriParameters:
      id:
        displayName: unique authentication policy identifier
        description: id of the authentication policy
        type: string
        maxLength: 36
        required: true
    is: [secured]
    
    get:
      description: Returns the authentication policy by its id.
      headers:
        Accept:
          description: Media type.
          example: application/vnd.com.covisint.platform.authn.policy.v1+json.
          type: string
          required: true
      responses:
        200:
          description: The authentication policy was successfully retrieved
          body:
            application/vnd.com.covisint.platform.authn.policy.v1+json:
              schema: authenticationPolicy
        400:
          description: There was a problem with the client's request
          # substatus codes are mentioned below:
          # framework:request:invalid:header:value - Invalid x-requestor header value. Valid values are [person, application]        
    delete:
          description: Removes the authentication policy by its id.
          headers:
          responses:
            204:
              description: The authentication policy was successfully removed.
            400:
              description: There was a problem with the client's request
              # substatus codes are mentioned below:
              # framework:request:invalid:header:value - Invalid x-requestor header value. Valid values are [person, application]
              body:
                application/vnd.com.covisint.error.v1+json:
                  schema: errorResponseSchema
/passwords/policies:
     is: [secured]
     description: collection endpoint for password policy resources
     get:
       description: Performs a search for password policy resources.
       headers:
        Accept:
          description: Media type.
          example: application/vnd.com.covisint.platform.password.policy.v1+json.
          type: string
          required: true
       queryParameters:
        id: 
          description: Retrieve only password policies with the specified ids.  The search is case-insensitve.  Multiple parameters are supported and the search results will be a union.
          type: string
          maxLength: 36
          required: false
        sortBy:
          description: Sort the search results.
          type: string
          required: false
          enum: [ "creation" ]
       responses:
        200:
         description: All password policies that satisfy the query parameters were successfully retrieved (response collection may be empty).
         body:
          application/vnd.com.covisint.platform.password.policy.v1+json:
            schema: passwordPolicy
        400:
         description: There was a problem with the client's request
         # substatus codes are mentioned below:
         # framework:request:invalid:header:value - Invalid x-requestor header value. Valid values are [person, application]
     post:
        description: Creates a password policy.
        headers:
         Accept:
          description: Media type.
          example: application/vnd.com.covisint.platform.password.policy.v1+json.
          type: string
          required: true
         Content-type:
          description: Media type.
          example: application/vnd.com.covisint.platform.password.policy.v1+json.
          type: string
          required: true
        body:
         application/vnd.com.covisint.platform.password.policy.v1+json:
          schema: passwordPolicy
        responses:
         200:
          description: The password policy was successfully created
          body:
            application/vnd.com.covisint.platform.password.policy.v1+json:
              schema: passwordPolicy
              
         400:
          description: There was a problem with the client's request
          # substatus codes are mentioned below:
          # framework:request
          # framework:request:io
          # framework:request:io:read - 
          # framework:request:io:read:parsing
          # framework:request:io:write
          # framework:request:header:missing - Missing request header: {headerName}
          # framework:request:param:missing - Missing request parameter: {queryParameterName}
          # framework:request:data:missing - The following information was missing from the resource: {resourceFieldName(s)}
          # framework:request:data:invalid - The following information should not be part of the resource: {resourceFieldName}   
          # framework:request:invalid:header:value - Invalid x-requestor header value. Valid values are [person, application]         
          body:
            application/vnd.com.covisint.error.v1+json:
              schema: errorResponseSchema
                          
     /{id}:
      description: individual resource endpoint for password policy. 
      uriParameters:
       id:
        displayName: unique password policy identifier
        description: id of the password policy
        type: string
        maxLength: 36
        required: true
      is: [secured]
    
      get:
         description: Returns the password policy by its id.
         headers:
          Accept:
           description: Media type.
           example: application/vnd.com.covisint.platform.password.policy.v1+json.
           type: string
           required: true
         responses:
          200:
            description: The password policy was successfully retrieved
            body:
              application/vnd.com.covisint.platform.password.policy.v1+json:
               schema: passwordPolicy
          400:
            description: There was a problem with the client's request
            # substatus codes are mentioned below:
            # framework:request:invalid:header:value - Invalid x-requestor header value. Valid values are [person, application]         
                
      delete:
          description: Removes the password policy by its id.
          headers:
          responses:
            204:
              description: The password policy was successfully removed.
            400:
              description: There was a problem with the client's request
              # substatus codes are mentioned below:
              #code 1...            
              # framework:request:invalid:header:value - Invalid x-requestor header value. Valid values are [person, application]
              body:
                application/vnd.com.covisint.error.v1+json:
                  schema: errorResponseSchema
/passwords/tasks/authenticate:
    is: [secured]
    description: endpoint used to authenticate the person.
    post:
      description: authenticate the person.
      headers:
       Accept:
        description: Media type.
        example: application/vnd.com.covisint.platform.authn.password.req.v1+json.
        type: string
        required: true
       Content-type:
         description: Media type.
         example: application/vnd.com.covisint.platform.authn.password.resp.v1+json.
         type: string
         required: true
      
      body:
         application/vnd.com.covisint.platform.authn.password.req.v1+json:
          schema: authenticationRequest
      responses:
       200:
          description: Returns the response post authentication.
          body:
            application/vnd.com.covisint.platform.authn.password.resp.v1+json:
              schema: authenticationResponse
       400:
        description: There was a problem with the client's request
        # substatus codes are mentioned below:
        # framework:request:header:missing - Missing request header: {headerName}
        # framework:request:invalid:header:value - Invalid x-requestor header value. Valid values are [person, application]
        body:
          application/vnd.com.covisint.error.v1+json:
            schema: errorResponseSchema
/passwords/tasks/expire:
    is: [secured]
    description: endpoint used to expire password resource.
    get:
      description: expire password resource.
      headers:
       Accept:
        description: Media type.
        example: application/vnd.com.covisint.platform.password.v1+json.
        type: string
        required: true
      queryParameters:
       subject:  
        description: the subject id.
        type: string
        required: true
      responses:
       200:
          description: Returns the expired password resource.
          body:
            application/vnd.com.covisint.platform.password.v1+json:
              schema: password
       400:
        description: There was a problem with the client's request
        # substatus codes are mentioned below:
        # framework:request:header:missing - Missing request header: {headerName}
        # password.not.found- Could not retrieve password for subject.
        # framework:request:invalid:header:value - Invalid x-requestor header value. Valid values are [person, application]
        body:
          application/vnd.com.covisint.error.v1+json:
            schema: errorResponseSchema
    post:
      description: expire password resource.
      headers:
       Accept:
        description: Media type.
        example: application/vnd.com.covisint.platform.password.v1+json.
        type: string
        required: true
      queryParameters:
       subject:  
        description: the subject id.
        type: string
        required: true
      responses:
       200:
          description: Returns the expired password resource.
          body:
            application/vnd.com.covisint.platform.password.v1+json:
              schema: password
       400:
        description: There was a problem with the client's request
        # substatus codes are mentioned below:
        # framework:request:header:missing - Missing request header: {headerName}
        # password.not.found- Could not retrieve password for subject.
        # framework:request:invalid:header:value - Invalid x-requestor header value. Valid values are [person, application]
        body:
          application/vnd.com.covisint.error.v1+json:
            schema: errorResponseSchema
/passwords/tasks/lock:
    is: [secured]
    description: endpoint used to lock password resource.
    get:
      description: lock password resource.
      headers:
       Accept:
        description: Media type.
        example: application/vnd.com.covisint.platform.password.v1+json.
        type: string
        required: true
      queryParameters:
       subject:  
        description: the subject id.
        type: string
        required: true
      responses:
       200:
          description: Returns the locked password resource.
          body:
            application/vnd.com.covisint.platform.password.v1+json:
              schema: password
       400:
        description: There was a problem with the client's request
        # substatus codes are mentioned below:
        # framework:request:header:missing - Missing request header: {headerName}
        # password.not.found- Could not retrieve password for subject.
        # framework:request:invalid:header:value - Invalid x-requestor header value. Valid values are [person, application]
        body:
          application/vnd.com.covisint.error.v1+json:
            schema: errorResponseSchema
    post:
      description: lock password resource.
      headers:
       Accept:
        description: Media type.
        example: application/vnd.com.covisint.platform.password.v1+json.
        type: string
        required: true
      queryParameters:
       subject:  
        description: the subject id.
        type: string
        required: true
      responses:
       200:
          description: Returns the locked password resource.
          body:
            application/vnd.com.covisint.platform.password.v1+json:
              schema: password
       400:
        description: There was a problem with the client's request
        # substatus codes are mentioned below:
        # framework:request:header:missing - Missing request header: {headerName}
        # password.not.found- Could not retrieve password for subject.
        # framework:request:invalid:header:value - Invalid x-requestor header value. Valid values are [person, application]
        body:
          application/vnd.com.covisint.error.v1+json:
            schema: errorResponseSchema         
/passwords/tasks/unlock:
    is: [secured]
    description: endpoint used to unlock password resource.
    get:
      description: unlock password resource.
      headers:
       Accept:
        description: Media type.
        example: application/vnd.com.covisint.platform.password.v1+json.
        type: string
        required: true
      queryParameters:
       subject:  
        description: the subject id.
        type: string
        required: true
      responses:
       200:
          description: Returns the unlocked password resource.
          body:
            application/vnd.com.covisint.platform.password.v1+json:
              schema: password
       400:
        description: There was a problem with the client's request
        # substatus codes are mentioned below:
        # framework:request:header:missing - Missing request header: {headerName}
        # password.not.found- Could not retrieve password for subject.
        # framework:request:invalid:header:value - Invalid x-requestor header value. Valid values are [person, application]
        body:
          application/vnd.com.covisint.error.v1+json:
            schema: errorResponseSchema
    post:
      description: unlock password resource.
      headers:
       Accept:
        description: Media type.
        example: application/vnd.com.covisint.platform.password.v1+json.
        type: string
        required: true
      queryParameters:
       subject:  
        description: the subject id.
        type: string
        required: true
      responses:
       200:
          description: Returns the unlocked password resource.
          body:
            application/vnd.com.covisint.platform.password.v1+json:
              schema: password
       400:
        description: There was a problem with the client's request
        # substatus codes are mentioned below:
        # framework:request:header:missing - Missing request header: {headerName}
        # password.not.found- Could not retrieve password for subject.
        # framework:request:invalid:header:value - Invalid x-requestor header value. Valid values are [person, application]
        body:
          application/vnd.com.covisint.error.v1+json:
            schema: errorResponseSchema
/passwords :
     is: [secured]
     description: collection endpoint for password resources
     get:
       description: Performs a search for password resources.
       headers:
        Accept:
          description: Media type.
          example: application/vnd.com.covisint.platform.password.v1+json.
          type: string
          required: true
       queryParameters:
        id: 
          description: Retrieve only password with the specified ids.  The search is case-insensitve.  Multiple parameters are supported and the search results will be a union.
          type: string
          maxLength: 36
          required: false
        sortBy:
          description: Sort the search results.
          type: string
          required: false
          enum: [ "creation" ]
       responses:
        200:
         description: All password resources that satisfy the query parameters were successfully retrieved (response collection may be empty).
         body:
          application/vnd.com.covisint.platform.password.v1+json:
            schema: password
        400:
         description: There was a problem with the client's request
         # substatus codes are mentioned below:
         # framework:request:invalid:header:value - Invalid x-requestor header value. Valid values are [person, application]
     /{id}:
      description: individual resource endpoint for password. 
      uriParameters:
       id:
        displayName: unique password identifier
        description: id of the password
        type: string
        maxLength: 36
        required: true
      is: [secured]
    
      get:
         description: Returns the password by its id.
         headers:
          Accept:
           description: Media type.
           example: application/vnd.com.covisint.platform.password.v1+json.
           type: string
           required: true
         responses:
          200:
            description: The password was successfully retrieved
            body:
              application/vnd.com.covisint.platform.password.v1+json:
               schema: passwordPolicy
          400:
            description: There was a problem with the client's request
            # substatus codes are mentioned below:
            # framework:request:invalid:header:value - Invalid x-requestor header value. Valid values are [person, application]       
      put:
        description: Creates or updates a password resource.This end point will create new password resource if it doesnot exist else will update the existing password resource.
        headers:
         Accept:
          description: Media type.
          example: application/vnd.com.covisint.platform.password.v1+json.
          type: string
          required: true
         Content-type:
          description: Media type.
          example: application/vnd.com.covisint.platform.password.v1+json.
          type: string
          required: true
        queryParameters:
         mode: 
          description: Mode desccribes the context under which a password resource is getting updated.
          type: string
          enum: [ "SPECIFY","CHANGE","RESET"]
        body:
         application/vnd.com.covisint.platform.password.v1+json:
          schema: password
        responses:
         200:
          description: The password policy was successfully created or updated.
          body:
            application/vnd.com.covisint.platform.password.v1+json:
              schema: password
              
         400:
          description: There was a problem with the client's request
          # substatus codes are mentioned below:
          # framework:request
          # framework:request:io
          # framework:request:io:read - 
          # framework:request:io:read:parsing
          # framework:request:io:write
          # framework:request:header:missing - Missing request header: {headerName}
          # framework:request:data:missing - The following information was missing from the resource: {resourceFieldName(s)}
          # framework:request:data:invalid - The following information should not be part of the resource: {resourceFieldName}
          # framework:request:invalid:header:value - Invalid x-requestor header value. Valid values are [person, application]
          # current.password.missing - When changing a password, the current password must be supplied
          body:
            application/vnd.com.covisint.error.v1+json:
              schema: errorResponseSchema 
/authn/pins/{id}:
      description: individual resource endpoint for pin. 
      uriParameters:
       id:
        displayName: unique pin identifier
        description: id of the pin
        type: string
        maxLength: 36
        required: true
      is: [secured]
    
      get:
         description: Returns the pin resource by its id.
         headers:
          Accept:
           description: Media type.
           example: application/vnd.com.covisint.platform.authn.pin.v1+json.
           type: string
           required: true
         responses:
          200:
            description: The pin was successfully retrieved
            body:
              application/vnd.com.covisint.platform.authn.pin.v1+json:
               schema: pin
          400:
            description: There was a problem with the client's request
            # substatus codes are mentioned below:
            # framework:request:invalid:header:value - Invalid x-requestor header value. Valid values are [person, application]      
      put:
        description: Creates a pin resource.
        headers:
         Accept:
          description: Media type.
          example: application/vnd.com.covisint.platform.authn.pin.v1+json.
          type: string
          required: true
         Content-type:
          description: Media type.
          example: application/vnd.com.covisint.platform.authn.pin.v1+json.
          type: string
          required: true
        body:
         application/vnd.com.covisint.platform.authn.pin.v1+json:
          schema: pin
        responses:
         200:
          description: The pin resource was successfully created
          body:
            application/vnd.com.covisint.platform.authn.pin.v1+json:
              schema: pin
              
         400:
          description: There was a problem with the client's request
          # substatus codes are mentioned below:
          # framework:request
          # framework:request:io
          # framework:request:io:read - 
          # framework:request:io:read:parsing
          # framework:request:io:write
          # framework:request:header:missing - Missing request header: {headerName}
          # framework:request:param:missing - Missing request parameter: {queryParameterName}
          # framework:request:data:missing - The following information was missing from the resource: {resourceFieldName(s)}
          # framework:request:data:invalid - The following information should not be part of the resource: {resourceFieldName}
          # framework:request:invalid:header:value - Invalid x-requestor header value. Valid values are [person, application]            
          body:
            application/vnd.com.covisint.error.v1+json:
              schema: errorResponseSchema
      delete:
          description: Removes the pin by its id.
          headers:
          responses:
            204:
              description: The pin was successfully removed.
            400:
              description: There was a problem with the client's request
              # substatus codes are mentioned below:
              # framework:request:invalid:header:value - Invalid x-requestor header value. Valid values are [person, application]
              body:
                application/vnd.com.covisint.error.v1+json:
                  schema: errorResponseSchema
                  
/authn/pins/tasks/validate:
    is: [secured]
    description: endpoint used to validate pin resource.
    post:
      description: validate pin resource.
      headers:
       Content-Type:
        description: Media type.
        example: application/vnd.com.covisint.platform.authn.pin.v1+json.
        type: string
        required: true
      body:
         application/vnd.com.covisint.platform.authn.pin.v1+json:
          schema: pin
      responses:
       204:
        description: The pin was successfully validated.
       400:
        description: There was a problem with the client's request
        # substatus codes are mentioned below:
        # framework:request:header:missing - Missing request header: {headerName}
        # framework:request:invalid:header:value - Invalid x-requestor header value. Valid values are [person, application]
        body:
          application/vnd.com.covisint.error.v1+json:
            schema: errorResponseSchema
/password/operations/validate:
    is: [secured]
    description: endpoint used to validate password string with respect to password policy.
    get:
      description: validate password resource.
      headers:
       Accept:
        description: Media type.
        example: application/vnd.covisint.platform.password.validationResponse.v1+json.
        type: string
        required: true
       Accept-Language:
        description: Language tag.
        default: en
        type: string
        required: false
      queryParameters:
         policyId:
          description: unique password policy identifier.
          type: string
          required: true
         password:
          description: password string to be validated.
          type: string
          required: true
         userId:
          description: unique person identifier.
          type: string
          required: false
         scope: 
          description: scope under which a password resource is getting validated.
          type: string
          enum: [ "AUTHENTICATE","PASSWORD_RESET","PASSWORD_SPECIFY","PASSWORD_CHANGE","EXPIRED_PASSWORD_CHANGE"]
          required: true
         
      responses:
       200:
          description: The password validation response.
          body:
            application/vnd.covisint.platform.password.validationResponse.v1+json:
              schema: passwordValidation
       400:
        description: There was a problem with the client's request
        # substatus codes are mentioned below:
        # framework:request:header:missing - Missing request header: {headerName}
        # framework:request:invalid:header:value - Invalid x-requestor header value. Valid values are [person, application]
        body:
          application/vnd.com.covisint.error.v1+json:
            schema: errorResponseSchema                
